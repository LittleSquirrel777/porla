/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */




/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void init_key(GoSlice* tau_key_in, GoSlice* alpha_key_in);
extern void init_SRS(GoInt SRS_size, GoSlice* out, GoInt64* out_len);
extern void init_SRS_from_data(GoInt SRS_size, GoSlice* in);
extern void compute_digest(GoSlice* data_in, GoSlice* data_out);
extern void compute_digest_complement(GoSlice* data_in, GoSlice* data_out);
extern void compute_digest_from_srs(GoSlice* data_in, GoSlice* data_out);
extern void compute_multi_exp(GoSlice* scalars, GoSlice* points, GoInt length, GoSlice* result_out);
extern GoUint8 compare_commitment(GoSlice* commitment_a, GoSlice* commitment_b);
extern void create_proof(GoUint64 random_point, GoSlice* data_in, GoSlice* commitment_out, GoSlice* proof_H, GoSlice* proof_point, GoSlice* proof_claim);
extern GoUint8 verify_proof(GoSlice* commitment_in, GoSlice* proof_H, GoSlice* proof_point, GoSlice* proof_claim);
extern void add_point(GoSlice* point_a, GoSlice* point_b);
extern void mult_point(GoSlice* point_a, GoSlice* scalar);
extern void neg_point(GoSlice* point);
extern void set_inf_point(GoSlice* point);

#ifdef __cplusplus
}
#endif
